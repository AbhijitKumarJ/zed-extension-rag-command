POST /v1/rags/search HTTP/1.1
Host: 127.0.0.1:8000
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:129.0) Gecko/20100101 Firefox/129.0
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br, zstd
Referer: http://127.0.0.1:8000/playground?model=default&rag=aichat-wiki1
content-type: application/json
Content-Length: 49
Origin: http://127.0.0.1:8000
Connection: keep-alive
Sec-Fetch-Dest: empty
Sec-Fetch-Mode: cors
Sec-Fetch-Site: same-origin
Priority: u=0
Pragma: no-cache
Cache-Control: no-cache

Full request url:
http://127.0.0.1:8000/v1/rags/search


Request Body:
{"name":"aichat-wiki1","input":"what is aichat?"}

Response Body:
{"data":"Answer the query based on the context while respecting the rules. (user query, some textual context and rules, all inside xml tags)\n\n<context>\n## Shell Assistant\n\nSimply input what you want to do in natural language, and aichat will prompt and run the command that achieves your intent.\n\n**AIChat is aware of OS and shell you are using, it will provide shell command for specific system you have.**\n\n## Shell Integration\n\nSimply type `alt+e` to let `aichat` provide intelligent completions directly in your terminal.\n\nAIChat offers shell integration scripts for for bash, zsh, PowerShell, fish, and nushell. You can find them on GitHub at https://github.com/sigoden/aichat/tree/main/scripts/shell-integration.\n\n## Shell Autocompletion\n\nThe shell autocompletion suggests commands, options, and filenames as you type, enabling you to type less, work faster, and avoid typos.\n\nAIChat offers shell completion scripts for bash, zsh, PowerShell, fish, and nushell. You can find them on GitHub at https://github.com/sigoden/aichat/tree/main/scripts/completions.\n\n## Generate Code\n\nBy using the `--code` or `-c` parameter, you can specifically request pure code output.\n\n**The `-c/--code` with pipe ensures the extraction of code from Markdown.**\n\n## Use Files & Urls\n\nThe `-f/--file` can be used to send files to LLMs.\n\n```\n# Use local file\naichat -f data.txt\n# Use image file\naichat -f image.png ocr\n# Use multi files\naichat -f file1 -f file2 explain\n# Use local dirs\naichat -f dir/ summarize\n# Use remote URLs\naichat -f https://example.com/page summarize\n```\n\n## Usage\n\n```\nUsage: aichat [OPTIONS] [TEXT]...\n\nArguments:\n  [TEXT]...  Input text\n\nOptions:\n  -m, --model <MODEL>        Select a LLM model\n      --prompt <PROMPT>      Use the system prompt\n  -r, --role <ROLE>          Select a role\n  -s, --session [<SESSION>]  Start or join a session\n      --empty-session        Ensure the session is empty\n      --save-session         Ensure the new conversation is saved to the session\n  -a, --agent <AGENT>        Start a agent\n  -R, --rag <RAG>            Start a RAG\n      --serve [<ADDRESS>]    Serve the LLM API and WebAPP\n  -e, --execute              Execute commands in natural language\n  -c, --code                 Output code only\n  -f, --file <FILE>          Include files with the message\n  -S, --no-stream            Turn off stream mode\n      --dry-run              Display the message without sending it\n      --info                 Display information\n      --list-models          List all available chat models\n      --list-roles           List all roles\n      --list-sessions        List all sessions\n      --list-agents          List all agents\n      --list-rags            List all RAGs\n  -h, --help                 Print help\n  -V, --version              Print version\n\n```\n\n## Env file\n\nAIChat supports env file ( `<aichat-config-dir>/.env`) for managing environment variables.\n\nYou can put all your secret environment variables in the `.env` file.\n\n## Run Server\n\nAIChat comes with a built-in lightweight http server.\n\n```\n$ aichat --serve\nChat Completions API: http://127.0.0.1:8000/v1/chat/completions\nEmbeddings API:       http://127.0.0.1:8000/v1/embeddings\nLLM Playground:       http://127.0.0.1:8000/playground\nLLM Arena:            http://127.0.0.1:8000/arena?num=2\n\n```\n\nChange the listening address:\n\n```\n$ aichat --serve 0.0.0.0\n$ aichat --serve 8080\n$ aichat --serve 0.0.0.0:8080\n\n```\n\n## Examples\n\n```\naichat                                          # Enter REPL\naichat Tell a joke                              # Generate response\n\naichat -e install nvim                          # Execute command\naichat -c fibonacci in js                       # Generate code\n\naichat --serve                                  # Run server\n\naichat -m openai:gpt-4o                         # Select LLM\n\naichat -r role1                                 # Use role 'role1'\naichat -s                                       # Begin a temp session\naichat -s session1                              # Use session 'session1'\naichat -a agent1                                # Use agent 'agent1'\naichat -R rag1                                  # Use RAG 'rag1'\n\naichat --info                                   # View system info\naichat -r role1 --info                          # View role info\naichat -s session1 --info                       # View session info\naichat -a agent1 --info                         # View agent info\naichat -R rag1 --info                           # View RAG info\n\ncat data.toml | aichat -c to json > data.json   # Pipe Input/Output\noutput=$(aichat -S $input)                      # Run in the script\n\naichat -f a.png -f b.png diff images            # Use files\n```\n</context>\n\n<rules>\n- If you don't know, just say so.\n- If you are not sure, ask for clarification.\n- Answer in the same language as the user query.\n- If the context appears unreadable or of poor quality, tell the user then answer as best as you can.\n- If the answer is not in the context but you think you know the answer, explain that to the user then answer with your own knowledge.\n- Answer directly and without using xml tags.\n</rules>\n\n<user_query>\nwhat is aichat?\n</user_query>"}
